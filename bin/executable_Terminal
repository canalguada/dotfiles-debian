#!/bin/zsh
# vim: set ft=zsh fdm=marker ai ts=2 sw=2 tw=79 noet:

# set -x

PROG=$(basename "$0")
PROG=${PROG%.*}

backend=${MYTERMINAL:-"urxvt"}
[[ "$backend" =~ ^(urxvt|mlterm|xterm|st|terminator|xfce4-terminal)$ ]] ||
	backend=urxvt

DEFAULT_WORKING_DIRECTORY="$PWD"

# TODO: Maximized implementation

# Show information about how to use this terminal {{{
usage() {
	cat <<EOF
Launch commands in terminals.

Usage: $PROG [terminal options]... 

Example: 
  Ncmpcpp in first and xprop in second, checking properties. 
  $ Terminal -name music --title "Mpd client (ncmpcpp)" -e ncmpcpp \ 
    -pause -- xprop 

Long options are also valid with a single dash and without = separator. 

Common options: 
  Always implemented, either by $PROG frontend or backend. 
  -t, --title=TITLE      set title to TITLE
  -p, --pause            pause execution after command
  -e, --command=COMMAND  run COMMAND in terminal
  -x, --, --execute      catch remaining arguments as last command
  -v, --verbose          be verbose
  -h, --help             show this message and exit

Only X11 options:
  -c, --class=CLASS      set window class to CLASS
  -n, --name=NAME        set window class name to NAME
  -r, --role=ROLE        set window role to ROLE

Other options:
  Mostly available if supplied by backend. 
  -w, --working-directory=DIRECTORY
                         set working directory to DIRECTORY
      --homedir          set working directory to user's home
  -i, --icon=ICON        set window icon to ICON
  -H, --hold             retain tab or window after command exit
      --tab              open new tab
      --windows          open new window
EOF
	return 0
} #}}}

# Temporary files management {{{
typeset -ag tmpfiles
mkdir -p /tmp/$USER
mkfile() {
	if (( $# )); then
		pat="$1"
	else
		pat="tmp"
	fi
	f=$(mktemp -p /tmp/$USER "${PROG}-${pat}-XXXXXX")
	tmpfiles+=("$f")
	echo "$f"
}
clean() { (( $#tmpfiles )) && rm -f "${(@)tmpfiles}" ; }
trap clean EXIT
#}}}

# One-liners {{{
command_exists() { command -v "$1" >/dev/null 2>&1 ; }
get_iconpath() { (( $# )) && python3 -m local.find_icon "$1" ; }
source_or_die() { #{{{
	if [[ -f "$1" ]] ; then
		. "$1"
	else
		echo "not found '$1'" >&2
		exit 1
	fi
} #}}}
#}}}

source_or_die "$HOME/.local/lib/sh/errors.lib.sh"

# Array buffer {{{
typeset -ag params
params__prepend() { params=("$@" "${(@)params}") ; }
params__has() { (( ${params[(Ie)$1]} )) ; }
# }}}

# Job management {{{
typeset -ag jobs
jobs__create_new() { #{{{
	unset params	# Empty buffer 
	pause_flag="n"	# Reset pause and allow flags
	allow_flag="n"
	unset curcmd	# Unset current command
} #}}}
jobs__append_params() { params+=("$@") ; allow_flag="y" ; }
jobs__save_current() {
	unset fullcmd
	(( $#params )) &&
		fullcmd=(${(q-)params})
	jobs+=("$curcmd|$fullcmd")
}
jobs__finalize() { #{{{
	params__has "-w" || {	# Set default working directory if needed
		[[ "$PWD" = "$DEFAULT_WORKING_DIRECTORY" ]] ||
			params__prepend "-w" "$DEFAULT_WORKING_DIRECTORY"
	}
	if (( $# )); then
		if ! command_exists $1; then	# Discard if not found
			echo "$1 not found" | warning
			shift $#
			curcmd=${SHELL:t}
		else
			curcmd=${1:t}
		fi
	fi
	if (( $# )); then #{{{
		if [[ "$pause_flag" = "y" ]]; then
			script="$(mkfile "session")"	# Build bash script
			fullcmd=(${(q-)@})
			cat >"$script" <<-EOF
				#!/bin/bash
				trap "rm -f '$script' 2>/dev/null" EXIT
				$fullcmd
				echo
				echo -n "Appuyez sur une touche pour continuer..."
				read -r -n 1 key > /dev/null 2>&1
			EOF
			chmod +x "$script"
			params+=("-e" "$script")
		else
			params+=("-x" "$@")
		fi
	fi #}}}
	jobs__save_current	# Save command name and terminal arguments
	jobs__create_new	# Reset options
} #}}}
#}}}

# Parsing functions {{{
add_switch() { [[ -n "$1" ]] && params+=("-$1") ; }
start_new_terminal() { #{{{
	(( $# )) &&
		dest=$1 ||
		dest=tab
	case "$dest" in
		tab|window)	[[ "$allow_flag" = "y" ]] && jobs__finalize ;|
		tab) 			 	add_switch "T" ;;
		window) 		add_switch "W" ;;
		*)				 	return ;;
	esac
	allow_flag="y"
} #}}}
set_option() { opt=$1 ; shift ; jobs__append_params $opt "$@" ; }
alias set_title="set_option -t"
alias set_class="set_option -c"
alias set_name="set_option -n"
alias set_icon="set_option -i"
alias set_role="set_option -r"
set_directory() { #{{{
	[[ ! -d "$1" ]] &&
		error_exit 2 "Directory '$1' does not exist" ||
		jobs__append_params "-w" "$(realpath "$1")"
} #}}}
set_command() { cmd=$1 ; jobs__finalize ${(Q)"${(z)cmd}"} ; }
#}}}

# Backend management {{{
term_prop_adjust() { #{{{
	local wclassname
	cmdargs=("xdotool" "set_window")
	# Always change class name to track launched programs
	wclassname=${winstance:-$cmd}
	# If none required, change class to cmd when it's not some shell
	if [[ -z "$wclass" ]]; then
		case "$cmd" in
			sh|bash|zsh) : ;;
			*) wclass=$cmd ;;
		esac
	fi
	# cmdargs+=("--classname" "$wclassname")
	# [ -n "$wclass" ] && cmdargs+=("--class" "$wclass")
	# [ -n "$wrole" ] && cmdargs+=("--role" "$wrole")
	for opt ("classname" "class" "role") {
		wopt="w$opt"
		[ -n "${(P)wopt}" ] &&
			cmdargs+=("--$opt" "${(P)wopt}")
	}
	cmdargs+=("$1")
	# Set class name, class and role accordingly
	print ${(q-)"${(@)cmdargs}"} | info
	"${(@)cmdargs}" &
	wait
	# Reset changes
	unset wclass
	unset winstance
	unset wrole
} #}}}

get_wids() {
	instance=${instance:-$backend}
	class=${class:-$backend}
	wids=()
	## With grep and awk
	# wmctrl -lux | grep -iE "\<$instance\>.*\<$class\>" | awk '{ print $1 }'
	## With bash-like regex
	# pattern="\<$instance\>.*\<$class\>"
	# for line (${(f)"$(wmctrl -lux)"}) {
	#   [[ "${(L)line}" =~ ${(L)pattern} ]] &&
	#     wids+=(${${(z)line}[1]})
	# }
	## Using zsh features
	pattern="$instance.$class"
	lines=(${(f)"$(wmctrl -lux)"})
	for line (${(M)lines:#*${pattern}*}) { wids+=(${${(z)line}[1]}) ; }

	echo ${(O)wids}  # echo requires ${(z)...} pattern substitution
									 # print -l requires ${(f)...} pattern substitution
}

term_launch() { #{{{
	[[ -z "$WAYLAND_DISPLAY" ]] &&
			old=(${(z)$(get_wids)})
	cmdargs=(${(z)bin})  # No quotes to expand
	(( $#params )) &&
		cmdargs+=("${(@)params}")
	print ${(q-)"${(@)cmdargs}"} | info
	# Required to ensure keeping terminal open
	setsid "${(@)cmdargs}" & disown
} #}}}

run_job() { #{{{
	local wid
	unset params
	term_options "$@"
	term_launch
	if [[ (-z "$WAYLAND_DISPLAY") && ("$adjust" != "no") ]]; then
		# Find window id within 5 secs or skip properties adjustment
		count=0
		while [[ -z "$wid" ]] && (( $count < 10 )); do
			(( count++ ))
			sleep 0.5s
			wids=(${(z)$(get_wids)})
			(( $#old )) &&
				wids=(${wids:|old})
			(( $#wids )) &&
				wid=$wids[1]
		done
		[[ -n "$wid" ]] &&
			term_prop_adjust "$wid"
	fi
} #}}}
#}}}

# Main
# ====

jobs__create_new

# Parse options {{{
validate() {
	[[ ($2 = "-"*) || (-z "$2") ]] &&
		error_exit 1 "missing argument for option '$1'."
}

(( $# )) ||
	allow_flag="y"

while (( $# )); do  #{{{
	case "$1" in
		"-?"|-h|-help|--help)
			usage ; exit 0 ;; 

		-v|-verbose|--verbose)
			allow_flag="y"
			[[ ! -t 1 ]] && VERBOSITY=0 ||
				(( VERBOSITY++ )) ;;

		# Change backend
		-2|-alt|--alt)
			[[ "$backend" = "urxvt" ]] &&
				backend="mlterm" ||
				backend="urxvt"
			;;

		# On exit	
		-p|-pause|--pause)
			pause_flag="y" ;;
		-H|-hold|--hold)
			add_switch "H" ;;

		# Window properties
		-tab|--tab)
			start_new_terminal "tab" ;;
		-window|--window)
			start_new_terminal "window" ;;

		# Validating option
		-w|-working-directory|--working-directory| \
			-t|-T|-title|--title|-c|-class|--class|-n|-name|--name| \
			-r|-role|--role|-i|-icon|--icon|-e|-command|--command)
			validate "$@" ;|

		# Working directory
		-homedir|--homedir)
			set_directory "$HOME" ;;
		-w|-working-directory|--working-directory)
			set_directory "$2" ; shift ;;
		-working-directory=*|--working-directory=*)
			set_directory "${1#*=}" ;;

		# Title
		-t|-T|-title|--title)
			set_title "$2" ; shift ;;
		-title=*|--title=*)
			set_title "${1#*=}" ;;

		# Class
		-c|-class|--class)
			set_class "$2" ; shift ;;
		-class=*|--class=*)
			set_class "${1#*=}" ;;
		
		# Instance name
		-n|-name|--name)
			set_name "$2" ; shift ;;
		-name=*|--name=*)
			set_name "${1#*=}" ;;
		
		# Role
		-r|-role|--role)
			set_role "$2" ; shift ;;
		-role=*|--role=*)
			set_role "${1#*=}" ;;

		# Icon
		-i|-icon|--icon)
			set_icon "$2" ; shift ;;
		-icon=*|--icon=*)
			set_icon "${1#*=}" ;;

		# Command
		-e|-command|--command)
			set_command "$2" ; shift ;;
		-command=*|--command=*)
			set_command "${1#*=}" ;;
		-x|--|-execute|--execute)
			allow_flag="y" ; shift ; break ;;

		# Error
		*)
			error_exit 1 "unknown option '$1'." ;;
	esac
	shift
done  #}}}

typeset -g class wclass
typeset -g instance winstance
typeset -g role wrole

case "$backend" in
	mlterm)  #{{{
		bin=mlclient
		instance=xterm
		class=mlterm
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) ;; # No new tab
					-W) ;; # No new window
					-H) ;;
					-w) params+=("--working-directory=$2") ; shift ;;
					-t) params+=("-T" "$2") ; shift ;;
					-c) params+=("-N" "$2") ; class=$2 ; shift ;; # Set wm class
					-n) winstance=$2 ; shift ;; # Set wm class name
					-r) wrole=$2 ; shift ;; # Set wm role
					-i)  # Find icon file path for current theme
						iconpath=$(get_iconpath "$2")
						[ -n "$iconpath" ] &&
							params+=("--iconpath=$iconpath")
						shift
						;;
					-e) cmd=$2 ; params+=("-e" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-e") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	urxvt)  #{{{
		bin=urxvt
		instance=urxvt
		class=URxvt
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) ;; # No new tab
					-W) ;; # No new window
					-H) params+=("-hold") ;;
					-w) params+=("-cd" "$2") ; shift ;;
					-t) params+=("-title" "$2") ; shift ;;
					-c) wclass=$2 ; shift ;; # Set wm class
					-n) params+=("-name" "$2") ; instance=$2 ; shift ;; # Set wm class name
					-r) wrole=$2 ; shift ;; # Set wm role
					-i)  # Find icon file path for current theme
						iconpath=$(get_iconpath "$2")
						[ -n "$iconpath" ] &&
							params+=("-icon" "$iconpath")
						shift
						;;
					-e) cmd=$2 ; params+=("-e" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-e") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	xterm)  #{{{
		bin="xterm -u8"
		instance=xterm
		class=UXTerm
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) ;; # No new tab
					-W) ;; # No new window
					-H) params+=("-hold") ;;
					-w) shift ;;
					-t) params+=("-title" "$2") ; shift ;;
					-c) params+=("-class" "$2") ; class=$2 ; shift ;; # Set wm class
					-n) winstance=$2 ; shift  ;; # Set wm class name
					-r) wrole=$2 ; shift ;; # Set wm role
					-i) shift ;;
					-e) cmd=$2 ; params+=("-e" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-e") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	st)  #{{{
		bin=st
		instance=st-256color
		class=st-256color
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) ;; # No new tab
					-W) ;; # No new window
					-H) ;;
					-w) shift ;;
					-t) params+=("-t" "$2") ; shift ;;
					-c) params+=("-c" "$2") ; class=$2 ; shift ;; # Set wm class
					-n) params+=("-n" "$2") ; instance=$2 ; shift  ;; # Set wm class name
					-r) wrole=$2 ; shift ;; # Set wm role
					-i) shift ;;
					-e) cmd=$2 ; params+=("-e" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-e") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	terminator)  #{{{
		bin=terminator
		instance=terminator
		class=Terminator
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) params+=("--new-tab") ;;
					-W) ;;
					-H) params+=("-p" "hold") ;;
					-w) params+=("--working-directory=$2") ; shift ;;
					-t) params+=("-T" "$2") ; shift ;;
					-c) wclass=$2 ; shift ;; # Set wm class
					-n) winstance=$2 ; shift ;; # Set wm class name
					-r) params+=("-r" "$2") ; shift ;; # Set wm role
					-i)
						params+=("-i" "$2")
						shift
						;;
					-e) cmd=$2 ; params+=("-x" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-x") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	xfce4-terminal)  #{{{
		bin=xfce4-terminal
		instance=xfce4-terminal
		class=Xfce4-terminal
		term_options () {
			while (( $# )); do
				case "$1" in
					-T) params+=("--tab") ;;
					-W) params+=("--window") ;;
					-H) params+=("-H") ;;
					-w) params+=("--working-directory=$2") ; shift ;;
					-t) params+=("-T" "$2") ; shift ;;
					-c) wclass=$2 ; shift ;; # Set wm class
					-n) winstance=$2 ; shift ;; # Set wm class name
					-r) wrole=$2 ; shift ;; # Set wm role
					-i)
						params+=("-I" "$2")
						shift
						;;
					-e) cmd=$2 ; params+=("-e" ${(Q)"${(z)cmd}"}) ; shift ;;
					-x) params+=("-x") ; shift ; break ;; # Greedy command
					*)
						usage
						msg="unknown option '$1'.\nYou shouldn't see this."
						error_exit 1 "$msg" ;;
				esac
				shift
			done
			(( $# )) &&
				params+=("$@")
		}
		adjust=yes
		;;  #}}}
	*)
		error_exit 1 "not valid backend '$1'." ;;
esac
#}}}

if (( $# )) || [[ "$allow_flag" = "y" ]]; then
	jobs__finalize "$@"
fi

for job in $jobs; do
	cmd=${job%%|*}
	fullcmd=${job#*|}
	cmdargs=(${(Q)${(z)fullcmd}})
	run_job "${(@)cmdargs}"
done

exit 0
